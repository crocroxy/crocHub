local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

-- Settings
local Settings = {
    NoClipEnabled = false,
    NoClipKeybind = Enum.KeyCode.C,
    HighlightEnabled = false,
    HighlightColor = Color3.fromRGB(255, 0, 0),
    HighlightedObjects = {},
    HighlightTransparency = 0.5,
    HighlightList = {} -- New: Store list of items to highlight
}

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "CrocHub",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "Dead Rails",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "crochub",
        FileName = "Config"
    }
})

-- Create Tabs
local MainTab = Window:CreateTab("Main", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local HighlightTab = Window:CreateTab("Highlight", 4483362458)

-- Improved NoClip Function with Better Method
local function ToggleNoClip()
    Settings.NoClipEnabled = not Settings.NoClipEnabled
    Rayfield:Notify({
        Title = "NoClip",
        Content = Settings.NoClipEnabled and "Enabled" or "Disabled",
        Duration = 2
    })
end

-- Enhanced Highlight Function
local function HighlightObject(objectName)
    if not Settings.HighlightEnabled then return end
    
    -- Search in workspace and its descendants
    local function searchInFolder(folder)
        for _, object in ipairs(folder:GetChildren()) do
            if object.Name:lower():find(objectName:lower()) then
                if not Settings.HighlightedObjects[object] then
                    local highlight = Instance.new("Highlight")
                    highlight.FillColor = Settings.HighlightColor
                    highlight.OutlineColor = Settings.HighlightColor
                    highlight.FillTransparency = Settings.HighlightTransparency
                    highlight.Parent = object
                    Settings.HighlightedObjects[object] = highlight
                    -- Add to highlight list if not already present
                    if not table.find(Settings.HighlightList, objectName) then
                        table.insert(Settings.HighlightList, objectName)
                    end
                end
            end
            if #object:GetChildren() > 0 then
                searchInFolder(object)
            end
        end
    end
    
    searchInFolder(game.Workspace)
end

-- Clear Highlights Function
local function ClearHighlights()
    for object, highlight in pairs(Settings.HighlightedObjects) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    Settings.HighlightedObjects = {}
    Settings.HighlightList = {}
end

-- Create UI Elements
-- Main Tab
MainTab:CreateToggle({
    Name = "NoClip Toggle",
    CurrentValue = false,
    Flag = "NoClipToggle",
    Callback = function(Value)
        Settings.NoClipEnabled = Value
    end,
})

-- Settings Tab
SettingsTab:CreateKeybind({
    Name = "NoClip Keybind",
    CurrentKeybind = "C",
    HoldToInteract = false,
    Flag = "NoClipKeybind",
    Callback = function(Keybind)
        Settings.NoClipKeybind = Keybind
    end,
})

-- Highlight Tab
HighlightTab:CreateToggle({
    Name = "Enable Highlight ESP",
    CurrentValue = false,
    Flag = "HighlightESP",
    Callback = function(Value)
        Settings.HighlightEnabled = Value
        if not Value then
            ClearHighlights()
        end
    end,
})

HighlightTab:CreateTextbox({
    Name = "Add Item to Highlight List",
    PlaceholderText = "Enter item name to add",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        if Text ~= "" and Settings.HighlightEnabled then
            HighlightObject(Text)
            Rayfield:Notify({
                Title = "Item Added",
                Content = "Added '" .. Text .. "' to highlight list",
                Duration = 2
            })
        end
    end,
})

HighlightTab:CreateColorPicker({
    Name = "Highlight Color",
    Color = Settings.HighlightColor,
    Flag = "HighlightColor",
    Callback = function(Color)
        Settings.HighlightColor = Color
        -- Update existing highlights
        for _, highlight in pairs(Settings.HighlightedObjects) do
            if highlight and highlight.Parent then
                highlight.FillColor = Color
                highlight.OutlineColor = Color
            end
        end
    end,
})

HighlightTab:CreateSlider({
    Name = "Highlight Transparency",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "Alpha",
    CurrentValue = 0.5,
    Flag = "HighlightTransparency",
    Callback = function(Value)
        Settings.HighlightTransparency = Value
        -- Update existing highlights
        for _, highlight in pairs(Settings.HighlightedObjects) do
            if highlight and highlight.Parent then
                highlight.FillTransparency = Value
            end
        end
    end,
})

HighlightTab:CreateButton({
    Name = "List Highlighted Items",
    Callback = function()
        if #Settings.HighlightList > 0 then
            local itemList = table.concat(Settings.HighlightList, "\n• ")
            Rayfield:Notify({
                Title = "Highlighted Items",
                Content = "Currently highlighting:\n• " .. itemList,
                Duration = 5
            })
        else
            Rayfield:Notify({
                Title = "Highlighted Items",
                Content = "No items are currently being highlighted",
                Duration = 3
            })
        end
    end,
})

HighlightTab:CreateButton({
    Name = "Clear All Highlights",
    Callback = function()
        ClearHighlights()
        Rayfield:Notify({
            Title = "Highlights Cleared",
            Content = "All highlights have been removed",
            Duration = 2
        })
    end,
})

-- Improved NoClip Connection with Better Method
RunService.Heartbeat:Connect(function()
    if Settings.NoClipEnabled and Character and Humanoid then
        for _, part in ipairs(Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
                part.Velocity = Vector3.new(0, 0, 0)
            end
        end
    end
end)

-- Keybind Connection
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Settings.NoClipKeybind then
        ToggleNoClip()
    end
end)

-- Character Added Connection
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    Humanoid = Character:WaitForChild("Humanoid")
    RootPart = Character:WaitForChild("HumanoidRootPart")
end)

-- Clean up highlights when objects are removed
game.Workspace.DescendantRemoving:Connect(function(object)
    if Settings.HighlightedObjects[object] then
        Settings.HighlightedObjects[object]:Destroy()
        Settings.HighlightedObjects[object] = nil
    end
end)
